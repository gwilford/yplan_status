#!/opt/local/bin/perl -w;

use strict;

my $cmd = "/usr/bin/rrdtool update --template hw:ch ";
# MPV settle time
my $settle = 15;
# The WiringPi GPIO pins we are monitoring
my %pins = { 2, 3 };
my %child;

# MPV signals => GPIO pin levels (%pins)
#             => Y Plan state bitmap (%yplan)
my %yplan = { 0 => "N:0:1",
	      2 => "N:1:1",
	      3 => "N:1:0", }

# Child routine
sub spawn_handler {
	my $pin = @_[0];
	my $pid = fork();
	die unless defined $pid;
	if ($pid == 0) {
		# In the child
		#system("gpio $pin wfl...");
		sleep $settle;
		exit(0);
	}
	$child{$pid} = $pin;
}

sub pin_state {
	my ($pin, $ret) = @_;
	my $change = 0;
	
	# read both pins
	foreach my $pin (keys %pins) {
		my $new = chomp(`gpio $pin read`);
		if ($pins{$pin} != $new) {
			$change = 1;
			$pins{$pin} = $new;
		}
	}
	update_rrd() if $change;
}

sub update_rrd {	
	#pin 2 = white, pin 3 = grey
	my $idx = $pins{2} + $pins{3} << 1;
	return unless exists($yplan{$idx});
	system($cmd . $yplan($idx);
}

# Initialise pin_handlers
foreach my $pin (keys %pins) {
	# init pin_status
	#gpio $pin input
	#gpio $pin pull_up
	#$pins{$pin} = chomp(`gpio $pin read`);
	spawn_handler($pin);
}

while (1) {
	my $pid = wait();
	# a child has exited
	exists($child{$pid}) or die "Unknown child exited: $pid";
	pin_state($child{$pid}, $?);
	delete($child{$pid});
	# replace terminated handler
	spawn_handler($pin);
}
