#!/opt/local/bin/perl -w

use strict;
use lib "/home/pi/perl5/lib/perl5";
use RRD::Simple;

# MPV / relay settle time and de-bounce
my $settle = 5;
# The WiringPi GPIO pins we are monitoring
#pin 0 = white wire, pin 2 = grey wire
my %pins = ( 0 => '',
	     2 => '');
# MPV signals => GPIO pin levels (%pins)
#             => Y Plan state bitmap (%yplan)
#my %yplan = (0 => "N:0:1",
#	      2 => "N:1:1",
#	      3 => "N:1:0", );
my %child;
my $rrd = RRD::Simple->new( file => "/home/pi/yplan_status/mpv.rrd" );

# Child routine
sub spawn_child {
	my $pin = $_[0];
	my $pid = fork();
	die unless defined $pid;
	if ($pid == 0) {
		# In the child
		my $ret = system("gpio wfi $pin both");
		sleep $settle unless $ret;
		exit($ret);
	}
	$child{$pid} = $pin;
}

sub pin_state {
	my ($pin, $ret) = @_;
	my $change = 0;
	
	# an edge event has occurred on at least one pin
	# read both pins
	foreach my $pin (keys %pins) {
		my $level = `gpio read $pin`;
		chomp($level);
		if ($pins{$pin} != $level) {
			$change = 1;
			$pins{$pin} = $level;
			msg("pin $pin status = ". $pins{$pin});
		}
	}
	update_rrd() if $change;
}

sub msg {
	print localtime() . ": ". $_[0] . "\n";
}

sub update_rrd {	
#	my $idx = $pins{2} + $pins{3} << 1;
#	return unless exists($yplan{$idx});
#	system($cmd . $yplan{$idx});
	$rrd->update(white => $pins{0}, grey => $pins{2});
}

# Initialise pin edge change detection
msg("initialising GPIO pins");
foreach my $pin (keys %pins) {
	# init pin_status
	system("gpio mode $pin in");
	system("gpio mode $pin up");
	$pins{$pin} = `gpio read $pin`;
	chomp($pins{$pin});
	msg("pin $pin status = ". $pins{$pin});
	spawn_child($pin);
}
update_rrd();

while (1) {
	my $pid = wait();
	# a child has exited
	exists($child{$pid}) or die "Unknown child exited: $pid";
	$? == 0 or die "Child $pid died with returncode: $?";
	pin_state($child{$pid});
	# replace terminated handler
	spawn_child($child{$pid});
	delete($child{$pid});
}
